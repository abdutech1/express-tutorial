
Authentication and Authorization Middleware Examples
Let's explore how middleware can be used to handle authentication (verifying who the user is) and authorization (determining what the user is allowed to do).

1. Authentication Middleware (Simplified)

This example demonstrates a basic authentication middleware that checks for a specific token in the request headers.

// In your app.js or a separate middleware file

const authenticate = (req, res, next) => {
  const authHeader = req.headers.authorization;

  if (authHeader === 'Bearer mysecrettoken') {
    // In a real application, you would verify the token against a database or auth server
    req.user = { id: 123, username: 'authenticatedUser' }; // Attach user information to the request
    next(); // Authentication successful, proceed to the next middleware or route handler
  } else {
    res.status(401).send('Unauthorized'); // Authentication failed
  }
};

export default authenticate;


Explanation:

This authenticate middle]ware function checks for an Authorization header with the value Bearer mysecrettoken.
Important: In a real application, you would never hardcode tokens like this. You'd typically use JSON Web Tokens (JWT) or other secure methods to generate and verify tokens.
If the token matches (in this simplified example), we attach a user object to the req object. This allows subsequent middleware or route handlers to access information about the authenticated user.
If the token is missing or invalid, we send a 401 Unauthorized response.
We call next() to pass control to the next middleware or the route handler if authentication is successful.
How to Use It:

You can apply this middleware to specific routes or groups of routes:

// In your app.js

import express from 'express';
import bodyParser from 'body-parser';
import usersRoute from './users.js';
import authenticate from './middleware/authenticate.js'; // Assuming you saved the middleware in a 'middleware' folder

const app = express();
const PORT = 5000;

app.use(bodyParser.json());

// Apply authentication to all routes under /api/users
app.use('/api/users', authenticate, usersRoute);

// ... other routes that might not require authentication ...

app.listen(PORT, () => {
  console.log(`The server is running on port ${PORT}`);
});

Now, any request to /api/users/... will first go through the authenticate middleware. If the correct Authorization header is not present, the request will be rejected before reaching your user route handlers.

2. Authorization Middleware (Simplified)

This example demonstrates a basic authorization middleware that checks if the authenticated user has a specific role.

// In your app.js or a separate middleware file

const authorize = (role) => {
  return (req, res, next) => {
    if (req.user && req.user.role === role) {
      next(); // User has the required role, proceed
    } else {
      res.status(403).send('Forbidden'); // User does not have the required role
    }
  };
};

export default authorize;

Explanation:

The authorize middleware is a higher-order function. It takes the required role as an argument and returns another middleware function.
Inside the returned middleware, we check if the req.user object exists (meaning the user was authenticated by a previous middleware) and if their role property matches the required role.
If the user has the necessary role, we call next().
If the user doesn't have the required role, we send a 403 Forbidden response.
How to Use It:

You can apply this middleware to specific routes after your authentication middleware:

// In your users.js

import express from 'express';
const router = express.Router();
import { authorize } from '../middleware/authorize.js';

// Sample user data (in a real app, this would come from a database)
const users = [
  { id: 1, name: 'John Doe', city: 'New York', age: 30, role: 'admin' },
  { id: 2, name: 'Jane Smith', city: 'New York', age: 28, role: 'user' },
];

// GET /api/users/admin-only (requires 'admin' role)
router.get('/admin-only', authorize('admin'), (req, res) => {
  const admins = users.filter(user => user.role === 'admin');
  res.status(200).json(admins);
});

// GET /api/users (requires authentication, but no specific role for this example)
router.get('/', (req, res) => {
  res.status(200).json(users);
});

// ... other user routes ...

export default router;

In this example:

The /api/users/admin-only route first requires the user to be authenticated (because it's under the /api/users route which has the authenticate middleware applied in app.js). Then, it uses the authorize('admin') middleware to ensure that only users with the role 'admin' can access this specific endpoint.
The /api/users route (without the /admin-only suffix) only requires authentication in this setup.
